(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['ngx-growl'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

var GrowlConfig = (function () {
    function GrowlConfig() {
    }
    return GrowlConfig;
}());

var GrowlService = (function () {
    /**
     * @param {?} config
     */
    function GrowlService(config) {
        this.config = config;
        this.OnAddMessage = new core.EventEmitter();
        this.OnRemoveMessage = new core.EventEmitter();
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlService._createMessage = function (msg) {
        return typeof msg === 'string' ? { message: msg } : msg;
    };
    /**
     * @param {?} msg
     * @param {?} type
     * @return {?}
     */
    GrowlService.prototype.message = function (msg, type) {
        var _this = this;
        msg = GrowlService._createMessage(msg);
        //need id to know that the right one is being removed
        var /** @type {?} */ message = {
            heading: msg.heading,
            message: msg.message,
            type: type,
            id: Math.floor((Math.random() * 999999999999) + 1)
        };
        this.OnAddMessage.emit(message);
        setTimeout(function () {
            _this.OnRemoveMessage.emit(message);
        }, this.config.displayTimeMs);
    };
    /**
     * @param {?} msg
     * @param {?} type
     * @return {?}
     */
    GrowlService.prototype.addMessage = function (msg, type) {
        var _this = this;
        if (!msg)
            return;
        var /** @type {?} */ arrayMsg = msg instanceof Array ? msg : [msg];
        arrayMsg.forEach(function (item) {
            _this.message(item, type);
        });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlService.prototype.addError = function (msg) {
        this.addMessage(msg, 'ERROR');
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlService.prototype.addWarn = function (msg) {
        this.addMessage(msg, 'WARN');
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlService.prototype.addInfo = function (msg) {
        this.addMessage(msg, 'INFO');
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlService.prototype.addSuccess = function (msg) {
        this.addMessage(msg, 'SUCCESS');
    };
    return GrowlService;
}());
GrowlService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
GrowlService.ctorParameters = function () { return [
    { type: GrowlConfig, },
]; };

var GrowlComponent = (function () {
    /**
     * @param {?} config
     * @param {?} growlService
     */
    function GrowlComponent(config, growlService) {
        var _this = this;
        this.config = config;
        this.growlService = growlService;
        this.growlItems = [];
        this.growlService.OnAddMessage.subscribe(function (msg) { return _this.onAddMessage(msg); });
        this.growlService.OnRemoveMessage.subscribe(function (msg) { return _this.onRemoveMessage(msg); });
    }
    /**
     * @return {?}
     */
    GrowlComponent.prototype.ngOnInit = function () {
    };
    /**
     * @param {?} msg
     * @param {?=} done
     * @return {?}
     */
    GrowlComponent.prototype._remove = function (msg, done) {
        var _this = this;
        if (!msg || !this.growlItems || !this.growlItems.length)
            return;
        var /** @type {?} */ curMsg;
        var /** @type {?} */ curMsgIdx;
        for (curMsgIdx = 0; curMsgIdx < this.growlItems.length; curMsgIdx++) {
            if (this.growlItems[curMsgIdx] && this.growlItems[curMsgIdx].id === msg.id) {
                curMsg = this.growlItems[curMsgIdx];
                break;
            }
        }
        if (!curMsg || curMsg.closing)
            return;
        curMsg.closing = true;
        setTimeout(function () {
            _this.growlItems.splice(curMsgIdx, 1);
            if (done) {
                done();
            }
        }, 350);
    };
    /**
     * @param {?} index
     * @param {?=} done
     * @return {?}
     */
    GrowlComponent.prototype.close = function (index, done) {
        if (typeof index !== 'number')
            return;
        this._remove(this.growlItems[index], done);
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlComponent.prototype.onAddMessage = function (msg) {
        var _this = this;
        if (this.growlItems.length && this.config.maxMessages && this.config.maxMessages <= this.growlItems.length) {
            this.close(this.growlItems.length - 1, function () {
                _this.growlItems.unshift(msg);
            });
        }
        else {
            this.growlItems.unshift(msg);
        }
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GrowlComponent.prototype.onRemoveMessage = function (msg) {
        this._remove(msg);
    };
    return GrowlComponent;
}());
GrowlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ngx-growl',
                template: "<div class=\"message-container {{item.type.toLowerCase()}}\" *ngFor=\"let item of growlItems; let idx = index;\" [ngClass]=\"{closing: item.closing}\"> <span class=\"close\" (click)=\"close(idx)\">Ã—</span> <strong class=\"heading\">{{item.heading}}</strong> <span class=\"message\">{{item.message}}</span> </div>",
                styles: ["@keyframes slidein { 0% { transform: translateX(100%); } 100% { transform: translateX(0); } } @keyframes slideout { 0% { transform: translateX(0); } 100% { transform: translateX(100%); } } :host { position: fixed; top: 0; right: 0; z-index: 500; } .message-container { transform-origin: top right; animation: 0.3s ease-out 0s 1 forwards slidein; position: relative; padding: 1rem; margin: .75rem 0; width: 27rem; background-color: rgba(250, 250, 250, 0.9); border: 0.15rem solid #e8e8e8; border-radius: .5rem 0 0 .5rem; box-shadow: -.1rem .1rem .5rem #666; } .message-container.closing { animation: 0.3s ease-out 0s 1 forwards slideout; } .message-container.error { border-left: 0.5rem solid #BC5543; } .message-container.warn { border-left: 0.5rem solid #E7E232; } .message-container.info { border-left: 0.5rem solid #146587; } .message-container.success { border-left: 0.5rem solid #477529; } .close { position: absolute; top: .5rem; right: .5rem; cursor: pointer; font-size: 2rem; font-weight: bold; line-height: 0; padding: .5rem .2rem; } .heading { display: block; } "]
            },] },
];
/**
 * @nocollapse
 */
GrowlComponent.ctorParameters = function () { return [
    { type: GrowlConfig, },
    { type: GrowlService, },
]; };

var GrowlModule = (function () {
    function GrowlModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    GrowlModule.forRoot = function (config) {
        if (config === void 0) { config = { displayTimeMs: 5000 }; }
        return {
            ngModule: GrowlModule,
            providers: [
                { provide: GrowlConfig, useValue: config },
                GrowlService
            ]
        };
    };
    return GrowlModule;
}());
GrowlModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [GrowlComponent],
                exports: [GrowlComponent],
                providers: [GrowlService]
            },] },
];
/**
 * @nocollapse
 */
GrowlModule.ctorParameters = function () { return []; };

exports.GrowlModule = GrowlModule;
exports.GrowlComponent = GrowlComponent;
exports.GrowlService = GrowlService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
